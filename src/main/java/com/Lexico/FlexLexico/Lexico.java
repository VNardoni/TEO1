// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: TEOFlex/Lexico.flex

package com.Lexico.FlexLexico;
import java_cup.runtime.Symbol;
import java_cup.sym;

@SuppressWarnings("fallthrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\2\1\22\0\1\1\1\2\1\3"+
    "\5\0\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\10\16\1\17\1\20\1\21\1\22"+
    "\1\23\2\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\25\1\35\1\36\1\37\1\40"+
    "\1\41\1\25\1\42\1\43\1\44\2\25\1\45\3\25"+
    "\1\46\1\0\1\47\1\0\1\25\1\0\1\50\1\51"+
    "\4\50\1\52\1\50\1\53\3\50\1\54\1\50\1\55"+
    "\1\56\2\50\1\57\7\50\1\60\1\0\1\61\123\0"+
    "\1\25\37\0\1\50\u010e\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\1\21\13\1\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\0\1\30\1\0\1\31\3\0\1\32"+
    "\1\33\1\34\1\35\6\0\1\36\2\0\1\37\5\0"+
    "\1\40\1\41\1\42\1\43\1\44\5\0\1\45\1\46"+
    "\12\0\1\47\6\0\1\50\7\0\1\51\1\0\1\52"+
    "\2\0\1\53\1\54\1\2\6\0\1\55\2\0\2\54"+
    "\13\0\1\54\3\0\1\2\1\56\5\0\1\2\17\0"+
    "\1\2\14\0\1\57\2\0\1\60\4\0\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\62\0\62\0\372"+
    "\0\62\0\62\0\62\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4"+
    "\0\62\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352"+
    "\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\62"+
    "\0\62\0\u04e2\0\62\0\62\0\62\0\310\0\62\0\u0514"+
    "\0\u012c\0\u0546\0\u0578\0\u05aa\0\62\0\62\0\62\0\62"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\62\0\u0708"+
    "\0\u073a\0\62\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\62"+
    "\0\u0866\0\u0578\0\62\0\62\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u0960\0\62\0\62\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a"+
    "\0\u0866\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\62\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\62\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\62\0\u0dde\0\62\0\u0e10"+
    "\0\u0e42\0\62\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e"+
    "\0\u0fa0\0\u0fd2\0\62\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u0ea6\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u10fe\0\62"+
    "\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u1482\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\62\0\u1770\0\u17a2"+
    "\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932"+
    "\0\u1964\0\u1996\0\62\0\u19c8\0\u19fa\0\62\0\u1a2c\0\u1a5e"+
    "\0\u1a90\0\u1ac2\0\62\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\2\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\2\1\26\1\27\1\30"+
    "\2\2\1\31\2\2\1\32\1\33\1\34\1\2\1\35"+
    "\1\36\1\37\1\40\1\41\10\42\1\43\1\44\63\0"+
    "\1\3\102\0\1\45\37\0\3\46\1\47\56\46\13\0"+
    "\1\50\62\0\3\51\56\0\1\52\60\0\1\51\1\0"+
    "\3\17\32\0\1\53\22\0\1\51\1\0\3\17\62\0"+
    "\1\54\2\0\1\55\61\0\1\56\61\0\1\57\61\0"+
    "\1\60\76\0\1\61\17\0\1\62\32\0\1\63\66\0"+
    "\1\64\1\0\1\65\57\0\1\66\55\0\1\67\5\0"+
    "\1\70\62\0\1\71\63\0\1\72\61\0\1\73\63\0"+
    "\1\74\50\0\1\75\61\0\1\76\6\0\1\77\33\0"+
    "\3\42\5\0\22\42\2\0\10\42\15\0\1\100\54\0"+
    "\1\101\67\0\2\102\66\0\1\103\66\0\1\104\105\0"+
    "\1\105\34\0\1\106\76\0\1\107\45\0\1\110\72\0"+
    "\1\111\65\0\1\112\61\0\1\113\55\0\1\114\63\0"+
    "\1\115\47\0\1\116\65\0\1\117\61\0\1\120\25\0"+
    "\6\121\1\122\4\121\1\123\46\121\52\0\1\124\44\0"+
    "\1\125\54\0\1\126\60\0\1\127\4\0\1\130\4\0"+
    "\1\131\44\0\1\132\67\0\1\133\63\0\1\134\64\0"+
    "\1\135\57\0\1\136\70\0\1\137\15\0\6\121\1\122"+
    "\4\121\1\140\54\121\1\122\4\121\1\141\46\121\26\0"+
    "\1\142\57\0\1\143\65\0\1\144\62\0\1\145\72\0"+
    "\1\146\63\0\1\147\57\0\1\150\56\0\1\151\52\0"+
    "\1\152\61\0\1\153\31\0\6\121\1\122\4\121\1\154"+
    "\54\121\1\155\4\121\1\141\46\121\55\0\1\156\46\0"+
    "\1\157\45\0\1\160\73\0\1\161\45\0\1\162\67\0"+
    "\1\163\32\0\1\164\6\0\1\165\1\0\3\166\31\0"+
    "\10\167\2\0\6\170\1\171\4\170\1\172\46\170\6\173"+
    "\1\174\4\173\1\175\46\173\54\0\1\176\35\0\1\177"+
    "\66\0\1\200\56\0\1\201\65\0\1\202\23\0\3\164"+
    "\1\153\56\164\14\0\3\153\46\0\1\164\6\0\1\153"+
    "\1\0\3\166\31\0\10\167\5\0\1\164\6\0\1\165"+
    "\1\0\3\203\5\0\22\167\2\0\10\167\2\0\13\170"+
    "\1\204\46\170\6\171\1\205\53\171\6\173\1\174\61\173"+
    "\1\174\4\173\1\206\54\173\1\174\4\173\1\207\46\173"+
    "\56\0\1\210\15\0\1\211\73\0\1\212\77\0\1\213"+
    "\31\0\1\214\52\0\1\164\6\0\1\153\1\0\3\203"+
    "\5\0\22\167\2\0\10\167\2\0\13\170\1\172\46\170"+
    "\6\171\1\205\4\171\1\215\46\171\6\173\1\174\4\173"+
    "\1\216\46\173\43\0\1\217\60\0\1\220\43\0\1\221"+
    "\100\0\1\222\16\0\6\171\1\205\4\171\1\223\46\171"+
    "\6\223\1\224\53\223\30\0\1\225\61\0\1\226\67\0"+
    "\1\227\53\0\1\230\31\0\6\223\1\224\4\223\1\231"+
    "\46\223\26\0\1\232\45\0\1\233\61\0\1\234\75\0"+
    "\1\235\33\0\6\223\1\224\4\223\1\236\46\223\44\0"+
    "\1\237\60\0\1\240\61\0\1\241\62\0\1\242\51\0"+
    "\1\243\55\0\1\244\61\0\1\245\65\0\1\246\65\0"+
    "\1\247\47\0\1\250\61\0\1\251\73\0\1\252\60\0"+
    "\1\253\66\0\1\254\61\0\1\255\54\0\1\256\56\0"+
    "\1\257\61\0\1\260\65\0\1\261\61\0\1\262\60\0"+
    "\1\263\61\0\1\264\22\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6900];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\3\11\5\1\1\11"+
    "\16\1\2\11\1\1\3\11\1\0\1\11\1\0\1\1"+
    "\3\0\4\11\6\0\1\11\2\0\1\11\5\0\1\11"+
    "\2\1\2\11\5\0\2\11\12\0\1\11\6\0\1\11"+
    "\7\0\1\11\1\0\1\11\2\0\1\11\2\1\6\0"+
    "\1\11\2\0\2\1\13\0\1\1\3\0\1\1\1\11"+
    "\5\0\1\1\17\0\1\11\14\0\1\11\2\0\1\11"+
    "\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(1000, new TokenObject("ERROR", yytext()));
            }
          // fall through
          case 51: break;
          case 2:
            { 
            }
          // fall through
          case 52: break;
          case 3:
            { return new Symbol(18, new TokenObject("Comillas", yytext()));
            }
          // fall through
          case 53: break;
          case 4:
            { return new Symbol(21, new TokenObject("Paréntesis abierto", yytext()));
            }
          // fall through
          case 54: break;
          case 5:
            { return new Symbol(22, new TokenObject("Paréntesis cerrado", yytext()));
            }
          // fall through
          case 55: break;
          case 6:
            { return new Symbol(42, new TokenObject("Multiplicación", yytext()));
            }
          // fall through
          case 56: break;
          case 7:
            { return new Symbol(40, new TokenObject("Suma", yytext()));
            }
          // fall through
          case 57: break;
          case 8:
            { return new Symbol(38, new TokenObject("Coma", yytext()));
            }
          // fall through
          case 58: break;
          case 9:
            { return new Symbol(41, new TokenObject("Resta", yytext()));
            }
          // fall through
          case 59: break;
          case 10:
            { return new Symbol(39, new TokenObject("Punto", yytext()));
            }
          // fall through
          case 60: break;
          case 11:
            { return new Symbol(43, new TokenObject("División", yytext()));
            }
          // fall through
          case 61: break;
          case 12:
            { return new Symbol(46, new TokenObject("CTE_E", yytext()));
            }
          // fall through
          case 62: break;
          case 13:
            { return new Symbol(37, new TokenObject("Dos puntos", yytext()));
            }
          // fall through
          case 63: break;
          case 14:
            { return new Symbol(36, new TokenObject("Punto y coma", yytext()));
            }
          // fall through
          case 64: break;
          case 15:
            { return new Symbol(29, new TokenObject("Menor que", yytext()));
            }
          // fall through
          case 65: break;
          case 16:
            { return new Symbol(26, new TokenObject("Asignación simple", yytext()));
            }
          // fall through
          case 66: break;
          case 17:
            { return new Symbol(30, new TokenObject("Mayor que", yytext()));
            }
          // fall through
          case 67: break;
          case 18:
            { return new Symbol(23, new TokenObject("Corchetes abierto", yytext()));
            }
          // fall through
          case 68: break;
          case 19:
            { return new Symbol(24, new TokenObject("Corchetes cerrado", yytext()));
            }
          // fall through
          case 69: break;
          case 20:
            { return new Symbol(49, new TokenObject("ID", yytext()));
            }
          // fall through
          case 70: break;
          case 21:
            { return new Symbol(19, new TokenObject("Llave abierta", yytext()));
            }
          // fall through
          case 71: break;
          case 22:
            { return new Symbol(20, new TokenObject("Llave cerrada", yytext()));
            }
          // fall through
          case 72: break;
          case 23:
            { return new Symbol(34, new TokenObject("Diferente", yytext()));
            }
          // fall through
          case 73: break;
          case 24:
            { return new Symbol(44, new TokenObject("CTE_STR", yytext()));
            }
          // fall through
          case 74: break;
          case 25:
            { return new Symbol(45, new TokenObject("CTE_F", yytext()));
            }
          // fall through
          case 75: break;
          case 26:
            { return new Symbol(35, new TokenObject("Asignación múltiple", yytext()));
            }
          // fall through
          case 76: break;
          case 27:
            { return new Symbol(32, new TokenObject("Menor o igual", yytext()));
            }
          // fall through
          case 77: break;
          case 28:
            { return new Symbol(33, new TokenObject("Igual", yytext()));
            }
          // fall through
          case 78: break;
          case 29:
            { return new Symbol(31, new TokenObject("Mayor o igual", yytext()));
            }
          // fall through
          case 79: break;
          case 30:
            { return new Symbol(2, new TokenObject("IF", yytext()));
            }
          // fall through
          case 80: break;
          case 31:
            { return new Symbol(9, new TokenObject("OR", yytext()));
            }
          // fall through
          case 81: break;
          case 32:
            { return new Symbol(28, new TokenObject("Cierra bloque comentario", yytext()));
            }
          // fall through
          case 82: break;
          case 33:
            { return new Symbol(27, new TokenObject("Abre bloque comentario", yytext()));
            }
          // fall through
          case 83: break;
          case 34:
            { return new Symbol(47, new TokenObject("CTE_B", yytext()));
            }
          // fall through
          case 84: break;
          case 35:
            { return new Symbol(25, new TokenObject("Asignación", yytext()));
            }
          // fall through
          case 85: break;
          case 36:
            { return new Symbol(8, new TokenObject("AND", yytext()));
            }
          // fall through
          case 86: break;
          case 37:
            { return new Symbol(16, new TokenObject("INT", yytext()));
            }
          // fall through
          case 87: break;
          case 38:
            { return new Symbol(7, new TokenObject("NOT", yytext()));
            }
          // fall through
          case 88: break;
          case 39:
            { return new Symbol(4, new TokenObject("ELSE", yytext()));
            }
          // fall through
          case 89: break;
          case 40:
            { return new Symbol(3, new TokenObject("THEN", yytext()));
            }
          // fall through
          case 90: break;
          case 41:
            { return new Symbol(5, new TokenObject("ENDIF", yytext()));
            }
          // fall through
          case 91: break;
          case 42:
            { return new Symbol(15, new TokenObject("FLOAT", yytext()));
            }
          // fall through
          case 92: break;
          case 43:
            { return new Symbol(1, new TokenObject("WHILE", yytext()));
            }
          // fall through
          case 93: break;
          case 44:
            { return new Symbol(48, new TokenObject("WRITE", yytext()));
            }
          // fall through
          case 94: break;
          case 45:
            { return new Symbol(17, new TokenObject("STRING", yytext()));
            }
          // fall through
          case 95: break;
          case 46:
            { return new Symbol(14, new TokenObject("AsigComp", yytext()));
            }
          // fall through
          case 96: break;
          case 47:
            { return new Symbol(10, new TokenObject("DECLARE.SECTION", yytext()));
            }
          // fall through
          case 97: break;
          case 48:
            { return new Symbol(12, new TokenObject("PROGRAM.SECTION", yytext()));
            }
          // fall through
          case 98: break;
          case 49:
            { return new Symbol(11, new TokenObject("ENDDECLARE.SECTION", yytext()));
            }
          // fall through
          case 99: break;
          case 50:
            { return new Symbol(13, new TokenObject("ENDPROGRAM.SECTION", yytext()));
            }
          // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
