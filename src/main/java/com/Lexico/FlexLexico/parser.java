
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 24 01:19:03 ART 2024
//----------------------------------------------------

package com.Lexico.FlexLexico;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 24 01:19:03 ART 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\005\005" +
    "\000\002\006\007\000\002\006\007\000\002\007\003\000" +
    "\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\004\014\005\001\002\000\004\002\000\001" +
    "\002\000\004\030\012\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\015\032\001\002\000" +
    "\006\015\ufffd\030\012\001\002\000\004\056\013\001\002" +
    "\000\006\031\017\044\016\001\002\000\004\031\015\001" +
    "\002\000\006\015\ufffc\030\ufffc\001\002\000\004\056\013" +
    "\001\002\000\004\041\020\001\002\000\004\030\021\001" +
    "\002\000\010\021\023\022\024\023\022\001\002\000\006" +
    "\031\ufff7\044\ufff7\001\002\000\006\031\ufff9\044\ufff9\001" +
    "\002\000\006\031\ufff8\044\ufff8\001\002\000\006\031\ufffa" +
    "\044\ufffa\001\002\000\004\044\027\001\002\000\010\021" +
    "\023\022\024\023\022\001\002\000\006\031\ufffb\044\ufffb" +
    "\001\002\000\004\015\ufffe\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\006\004\007\005\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\030\005" +
    "\010\001\001\000\004\006\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /** Método llamado automáticamente ante errores sintácticos */
    public void syntax_error(Symbol s) {
        System.out.println("Error en la línea " + (s.right + 1) + ", columna " + s.left + ". Símbolo no reconocido: " + s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    List<Object> result = new ArrayList<>();
    ArrayList<TokenObject> tokenList = new ArrayList<>();
    ArrayList<RuleObject> rulesList = new ArrayList<>();

    public void addNewRule(int id, String start, RuleItem... rules) {
        ArrayList<RuleItem> rulesTemp = new ArrayList();
        rulesTemp.addAll(Arrays.asList(rules));
        rulesList.add(new RuleObject(id, start, rulesTemp));
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= String 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          tokenList.add(new TokenObject("STRING", s));
          addNewRule(10, "TIPO -> ", new RuleItem(RuleType.T, s));
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= Int 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          tokenList.add(new TokenObject("INT", i));
          addNewRule(9, "TIPO -> ", new RuleItem(RuleType.T, i));
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= Float 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            tokenList.add(new TokenObject("FLOAT", f));
            addNewRule(8, "TIPO -> ", new RuleItem(RuleType.T, f));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ITEMS ::= Id Corchete_cerrado Asign_mult Corchete_abierto TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("ID", id));
                tokenList.add(new TokenObject("Corchete_cerrado", cc));
                tokenList.add(new TokenObject("Asign_mult", am));
                tokenList.add(new TokenObject("Corchete_abierto", ca));
                addNewRule(7, "ITEMS -> ",
                    new RuleItem(RuleType.T, id),
                    new RuleItem(RuleType.T, cc),
                    new RuleItem(RuleType.T, am),
                    new RuleItem(RuleType.T, ca),
                    new RuleItem(RuleType.NT, "TIPO")
                );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEMS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ITEMS ::= Id Coma ITEMS Coma TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("Coma", c));
                tokenList.add(new TokenObject("Coma", cc));
                addNewRule(6, "ITEMS -> ",
                    new RuleItem(RuleType.T, id),
                    new RuleItem(RuleType.T, c),
                    new RuleItem(RuleType.NT, "ITEMS"),
                    new RuleItem(RuleType.T, cc),
                    new RuleItem(RuleType.NT, "TIPO")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEMS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= Corchete_abierto ITEMS Corchete_cerrado 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Corchete_abierto", ca));
                tokenList.add(new TokenObject("Corchete_cerrado", cc));
                addNewRule(5, "DECLARACION -> ",
                    new RuleItem(RuleType.T, ca),
                    new RuleItem(RuleType.NT, "ITEMS"),
                    new RuleItem(RuleType.T, cc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;
		
                    addNewRule(4, "DECLARACIONES -> ",
                        new RuleItem(RuleType.NT, "DECLARACION")
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DECLARACION DECLARACIONES 
            {
              Object RESULT =null;
		
                    addNewRule(3, "DECLARACIONES -> ",
                        new RuleItem(RuleType.NT, "DECLARACION"),
                        new RuleItem(RuleType.NT, "DECLARACIONES")
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARESECTION ::= Declare_section DECLARACIONES Enddeclare_section 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ds = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int edsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eds = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    tokenList.add(new TokenObject("DECLARE_SECTION", ds));
                    tokenList.add(new TokenObject("ENDDECLARE_SECTION", eds));
                    addNewRule(2, "DECLARESECTION -> ",
                        new RuleItem(RuleType.T, ds),
                        new RuleItem(RuleType.NT, "DECLARACIONES"),
                        new RuleItem(RuleType.T, eds)
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARESECTION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= DECLARESECTION 
            {
              Object RESULT =null;
		
                            addNewRule(1, "START -> ", new RuleItem(RuleType.NT, "DECLARESECTION"));
                            RESULT = new TokenRulesObject(tokenList, rulesList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

