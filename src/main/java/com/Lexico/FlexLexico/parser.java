
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 26 02:29:38 ART 2024
//----------------------------------------------------

package com.Lexico.FlexLexico;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java_cup.runtime.*;
import java.util.Optional;
import java.util.Stack;
import java.util.stream.Collectors;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 26 02:29:38 ART 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\005\000\002\006\007\000\002\006\007\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\005\000\002\011\005\000\002\011\004\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\026\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\015\011\000\002\017\005\000\002\017\011\000" +
    "\002\017\006\000\002\017\005\000\002\017\003\000\002" +
    "\021\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\020\003\000\002\020\003\000\002\016\013\000" +
    "\002\016\011\000\002\031\006\000\002\032\007\000\002" +
    "\033\007\000\002\033\005\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\027\006\000\002\030\004\000\002\030\004\000" +
    "\002\030\003\000\002\030\003\000\002\012\005\000\002" +
    "\013\005\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\006\014\005\016\010\001\002\000\004\002" +
    "\uffff\001\002\000\004\030\172\001\002\000\004\002\167" +
    "\001\002\000\004\016\027\001\002\000\004\055\011\001" +
    "\002\000\004\026\017\001\002\000\004\042\015\001\002" +
    "\000\004\017\014\001\002\000\004\002\uffc2\001\002\000" +
    "\006\017\uffc0\055\011\001\002\000\004\017\uffc1\001\002" +
    "\000\006\051\022\056\021\001\002\000\004\027\025\001" +
    "\002\000\010\027\uffc3\051\022\056\021\001\002\000\010" +
    "\027\uffc4\051\022\056\021\001\002\000\004\027\uffc6\001" +
    "\002\000\004\027\uffc5\001\002\000\004\042\uffc7\001\002" +
    "\000\004\002\000\001\002\000\014\004\031\005\032\020" +
    "\036\055\011\056\033\001\002\000\004\017\166\001\002" +
    "\000\004\026\160\001\002\000\004\026\115\001\002\000" +
    "\004\032\072\001\002\000\004\042\uffef\001\002\000\004" +
    "\042\uffee\001\002\000\004\026\045\001\002\000\004\042" +
    "\ufff0\001\002\000\004\042\043\001\002\000\004\042\ufff2" +
    "\001\002\000\004\042\ufff1\001\002\000\024\004\031\005" +
    "\032\007\ufff3\010\ufff3\017\ufff3\020\036\025\ufff3\055\011" +
    "\056\033\001\002\000\012\007\ufff4\010\ufff4\017\ufff4\025" +
    "\ufff4\001\002\000\004\030\047\001\002\000\004\027\071" +
    "\001\002\000\004\056\050\001\002\000\006\031\053\044" +
    "\052\001\002\000\014\051\065\052\061\053\064\054\063" +
    "\056\060\001\002\000\004\056\056\001\002\000\004\043" +
    "\054\001\002\000\004\030\055\001\002\000\014\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\056\uffcd\001\002\000\006\031" +
    "\053\044\052\001\002\000\014\051\065\052\061\053\064" +
    "\054\063\056\060\001\002\000\006\031\uffcc\044\uffcc\001" +
    "\002\000\006\031\uffcb\044\uffcb\001\002\000\004\044\066" +
    "\001\002\000\006\031\uffc9\044\uffc9\001\002\000\006\031" +
    "\uffca\044\uffca\001\002\000\006\031\uffc8\044\uffc8\001\002" +
    "\000\014\051\uffce\052\uffce\053\uffce\054\uffce\056\uffce\001" +
    "\002\000\004\031\070\001\002\000\004\027\uffcf\001\002" +
    "\000\004\042\uffd0\001\002\000\014\026\101\052\074\053" +
    "\102\054\077\056\075\001\002\000\036\012\uffe7\013\uffe7" +
    "\027\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\042\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\001\002" +
    "\000\036\012\uffe4\013\uffe4\027\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\001\002\000\036\012\uffe5\013\uffe5\027" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\042\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\001\002\000" +
    "\036\012\uffea\013\uffea\027\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\042\uffea\045\uffea\046\uffea\047" +
    "\111\050\110\001\002\000\036\012\uffe2\013\uffe2\027\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\001\002\000\010" +
    "\042\uffed\045\106\046\105\001\002\000\014\026\101\052" +
    "\074\053\102\054\077\056\075\001\002\000\036\012\uffe3" +
    "\013\uffe3\027\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\042\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\001\002\000\010\027\104\045\106\046\105\001\002\000" +
    "\036\012\uffe6\013\uffe6\027\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\042\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\001\002\000\014\026\101\052\074\053\102" +
    "\054\077\056\075\001\002\000\014\026\101\052\074\053" +
    "\102\054\077\056\075\001\002\000\036\012\uffec\013\uffec" +
    "\027\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\042\uffec\045\uffec\046\uffec\047\111\050\110\001\002" +
    "\000\014\026\101\052\074\053\102\054\077\056\075\001" +
    "\002\000\014\026\101\052\074\053\102\054\077\056\075" +
    "\001\002\000\036\012\uffe9\013\uffe9\027\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\045\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\001\002\000\036\012\uffe8\013" +
    "\uffe8\027\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\042\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\001" +
    "\002\000\036\012\uffeb\013\uffeb\027\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\045\uffeb\046" +
    "\uffeb\047\111\050\110\001\002\000\016\011\120\026\117" +
    "\052\074\053\102\054\077\056\075\001\002\000\010\012" +
    "\150\013\152\027\uffdc\001\002\000\014\026\101\052\074" +
    "\053\102\054\077\056\075\001\002\000\004\026\142\001" +
    "\002\000\022\033\140\034\133\035\132\036\134\037\136" +
    "\040\137\045\106\046\105\001\002\000\004\027\123\001" +
    "\002\000\004\006\124\001\002\000\014\004\031\005\032" +
    "\020\036\055\011\056\033\001\002\000\006\007\127\010" +
    "\126\001\002\000\004\042\uffd1\001\002\000\014\004\031" +
    "\005\032\020\036\055\011\056\033\001\002\000\004\010" +
    "\131\001\002\000\004\042\uffd2\001\002\000\014\026\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\056\uffd8\001\002\000\014\026" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\056\uffd9\001\002\000\014" +
    "\026\uffd7\052\uffd7\053\uffd7\054\uffd7\056\uffd7\001\002\000" +
    "\014\026\101\052\074\053\102\054\077\056\075\001\002" +
    "\000\014\026\uffd6\052\uffd6\053\uffd6\054\uffd6\056\uffd6\001" +
    "\002\000\014\026\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5" +
    "\001\002\000\014\026\uffda\052\uffda\053\uffda\054\uffda\056" +
    "\uffda\001\002\000\014\012\uffdb\013\uffdb\027\uffdb\045\106" +
    "\046\105\001\002\000\014\026\101\052\074\053\102\054" +
    "\077\056\075\001\002\000\004\027\144\001\002\000\004" +
    "\027\uffde\001\002\000\004\027\147\001\002\000\024\027" +
    "\104\033\140\034\133\035\132\036\134\037\136\040\137" +
    "\045\106\046\105\001\002\000\010\012\150\013\152\027" +
    "\uffe0\001\002\000\014\026\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\056\uffd4\001\002\000\004\026\153\001\002\000\014\026" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3\001\002\000\014" +
    "\026\101\052\074\053\102\054\077\056\075\001\002\000" +
    "\004\027\155\001\002\000\004\027\uffdf\001\002\000\014" +
    "\026\101\052\074\053\102\054\077\056\075\001\002\000" +
    "\004\027\uffdd\001\002\000\016\011\120\026\117\052\074" +
    "\053\102\054\077\056\075\001\002\000\004\027\162\001" +
    "\002\000\004\024\163\001\002\000\014\004\031\005\032" +
    "\020\036\055\011\056\033\001\002\000\004\025\165\001" +
    "\002\000\004\042\uffe1\001\002\000\004\002\ufff5\001\002" +
    "\000\004\002\001\001\002\000\004\015\212\001\002\000" +
    "\006\015\ufffc\030\172\001\002\000\004\056\173\001\002" +
    "\000\006\031\176\044\177\001\002\000\004\031\175\001" +
    "\002\000\006\015\ufffb\030\ufffb\001\002\000\004\041\206" +
    "\001\002\000\004\056\173\001\002\000\004\044\201\001" +
    "\002\000\010\021\203\022\204\023\202\001\002\000\006" +
    "\031\ufff6\044\ufff6\001\002\000\006\031\ufff8\044\ufff8\001" +
    "\002\000\006\031\ufff7\044\ufff7\001\002\000\006\031\ufffa" +
    "\044\ufffa\001\002\000\004\030\207\001\002\000\010\021" +
    "\203\022\204\023\202\001\002\000\006\031\ufff9\044\ufff9" +
    "\001\002\000\004\015\ufffd\001\002\000\004\016\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\002\005\003\006\012\003\001\001\000" +
    "\002\001\001\000\006\004\167\005\170\001\001\000\002" +
    "\001\001\000\004\010\025\001\001\000\006\013\012\027" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\015\027\011\001" +
    "\001\000\002\001\001\000\004\030\017\001\001\000\002" +
    "\001\001\000\004\030\023\001\001\000\004\030\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\027\014\037\015\041\016" +
    "\036\026\040\027\034\031\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\043\014\037\015\041\016\036\026\040" +
    "\027\034\031\033\001\001\000\002\001\001\000\004\032" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\050\001\001\000\004\034\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\056\001\001\000\004\034\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\077\024\075\025\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\102\024" +
    "\075\025\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\113\025\072\001\001\000" +
    "\006\024\106\025\072\001\001\000\002\001\001\000\004" +
    "\025\112\001\001\000\004\025\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\121" +
    "\021\115\023\120\024\075\025\072\001\001\000\004\020" +
    "\155\001\001\000\012\021\144\023\145\024\075\025\072" +
    "\001\001\000\002\001\001\000\004\022\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\124\014\037" +
    "\015\041\016\036\026\040\027\034\031\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\127\014\037" +
    "\015\041\016\036\026\040\027\034\031\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\140\024\075\025" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\142\023\120\024" +
    "\075\025\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\134\001\001\000\004\020" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\153\023\120\024\075\025\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\156" +
    "\023\120\024\075\025\072\001\001\000\002\001\001\000" +
    "\014\017\160\021\115\023\120\024\075\025\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\163\014" +
    "\037\015\041\016\036\026\040\027\034\031\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\210\005\170" +
    "\001\001\000\004\006\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\177\001\001\000\002\001\001\000\004\007\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /** Método llamado automáticamente ante errores sintácticos */
    public void syntax_error(Symbol s) {
        System.out.println("Error en la línea " + (s.right + 1) + ", columna " + s.left + ". Símbolo no reconocido: " + s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    List<Object> result = new ArrayList<>();
    ArrayList<TokenObject> tokenList = new ArrayList<>();
    ArrayList<RuleObject> rulesList = new ArrayList<>();
	Stack<String> typesStack = new Stack<String>();
	
    public void addNewRule(int id, String start, RuleItem... rules) {
        ArrayList<RuleItem> rulesTemp = new ArrayList();
        rulesTemp.addAll(Arrays.asList(rules));
        rulesList.add(new RuleObject(id, start, rulesTemp));
    }

    public RuleItem addTerminalRuleItem(String terminal) {
        return new RuleItem(RuleType.T, terminal);
    }

    public RuleItem addNonTerminalRuleItem(String nonTerminal) {
        return new RuleItem(RuleType.NT, nonTerminal);
    }
    
    public void addType(String type){
    	typesStack.add(type);
    }
    
    public String getType(){
    	return typesStack.pop();
    }
    
	public void sortTypes(){
	
	    if (typesStack.isEmpty()) return;
	    List<TokenObject> tokenIds = tokenList.stream()
	        .filter(token -> token.name().equals("ID") && !token.type().isPresent())
	        .collect(Collectors.toList());
	
	    if (typesStack.size() == tokenIds.size()) {
	        tokenIds.forEach(tokenId -> tokenId.setType(Optional.of(getType())));
	    }
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PROGRAM_WRITE ::= SALIDA Punto_y_coma 
            {
              Object RESULT =null;
		
                addNewRule(65, "PROGRAM_WRITE -> ",
                    addNonTerminalRuleItem("SALIDA"),
                    addTerminalRuleItem("Punto_y_coma")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM_WRITE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PROGRAM_WRITE ::= SALIDA Punto_y_coma PROGRAM_WRITE 
            {
              Object RESULT =null;
		int pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                addNewRule(64, "PROGRAM_WRITE -> ",
                    addNonTerminalRuleItem("SALIDA"),
                    addTerminalRuleItem(pyc),
                    addNonTerminalRuleItem("PROGRAM_WRITE")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM_WRITE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PROGRAM_SECTION_WRITE ::= Program_section PROGRAM_WRITE Endprogram_section 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int epsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    tokenList.add(new TokenObject("PROGRAM_SECTION", ps, Optional.empty()));
                    tokenList.add(new TokenObject("ENDPROGRAM_SECTION", eps, Optional.empty()));
                    addNewRule(63, "PROGRAM_SECTION_WRITE -> ",
                        addTerminalRuleItem(ps),
                        addNonTerminalRuleItem("PROGRAM_WRITE"),
                        addTerminalRuleItem(eps)
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM_SECTION_WRITE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TEXTO ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(62, "TEXTO -> ",
                    addTerminalRuleItem(id)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TEXTO ::= Cte_s 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_s", s, Optional.empty()));
                addNewRule(61, "TEXTO -> ",
                    addTerminalRuleItem(s)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TEXTO ::= Id TEXTO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                addNewRule(60, "TEXTO -> ",
                    addTerminalRuleItem(id),
                    addNonTerminalRuleItem("TEXTO")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TEXTO ::= Cte_s TEXTO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("Cte_s", s, Optional.empty()));
                addNewRule(59, "TEXTO -> ",
                    addTerminalRuleItem(s),
                    addNonTerminalRuleItem("TEXTO")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SALIDA ::= Write Parentesis_abierto TEXTO Parentesis_cerrado 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Write", w, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(58, "SALIDA -> ",
                    addTerminalRuleItem(w),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("TEXTO"),
                    addTerminalRuleItem(pc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALIDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGN_DERECHA ::= Cte_s 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    tokenList.add(new TokenObject("Cte_s", s, Optional.empty()));
                    addNewRule(57, "FACTOR -> ",
                        addTerminalRuleItem(s)
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGN_DERECHA ::= Cte_b 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      tokenList.add(new TokenObject("Cte_b", b, Optional.empty()));
                      addNewRule(56, "FACTOR -> ",
                          addTerminalRuleItem(b)
                      );
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGN_DERECHA ::= Cte_i 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      tokenList.add(new TokenObject("Cte_i", e, Optional.empty()));
                      addNewRule(55, "FACTOR -> ",
                          addTerminalRuleItem(e)
                      );
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGN_DERECHA ::= Cte_f 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      tokenList.add(new TokenObject("Cte_f", f, Optional.empty()));
                      addNewRule(54, "FACTOR -> ",
                          addTerminalRuleItem(f)
                      );
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGN_DERECHA ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      addNewRule(53, "FACTOR -> ",
                          addTerminalRuleItem(id)
                      );
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OTRA_ASIGN ::= Corchete_cerrado Dos_puntos Corchete_abierto 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Corchete_cerrado", cc, Optional.empty()));
                tokenList.add(new TokenObject("Dos_puntos", dp, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_abierto", ca, Optional.empty()));
                addNewRule(52, "OTRA_ASIGN -> ",
                    addTerminalRuleItem(cc),
                    addTerminalRuleItem(dp),
                    addTerminalRuleItem(ca)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_ASIGN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OTRA_ASIGN ::= Coma Id OTRA_ASIGN ASIGN_DERECHA Coma 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Coma", c, Optional.empty()));
                tokenList.add(new TokenObject("Coma", cc, Optional.empty()));
                addNewRule(51, "OTRA_ASIGN -> ",
                    addTerminalRuleItem(c),
                    addTerminalRuleItem(id),
                    addNonTerminalRuleItem("OTRA_ASIGN"),
                    addNonTerminalRuleItem("ASIGN_DERECHA"),
                    addTerminalRuleItem(cc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_ASIGN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGN ::= Corchete_abierto Id OTRA_ASIGN ASIGN_DERECHA Corchete_cerrado 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Corchete_abierto", ca, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_cerrado", cc, Optional.empty()));
                addNewRule(50, "ASIGN -> ",
                    addTerminalRuleItem(ca),
                    addTerminalRuleItem(id),
                    addNonTerminalRuleItem("OTRA_ASIGN"),
                    addNonTerminalRuleItem("ASIGN_DERECHA"),
                    addTerminalRuleItem(cc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION_COMPLEJA ::= Asign_comp Parentesis_abierto ASIGN Parentesis_cerrado 
            {
              Object RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Asign_comp", ac, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(49, "ASIGNACION_COMPLEJA -> ",
                    addTerminalRuleItem(ac),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("ASIGN"),
                    addTerminalRuleItem(pc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SELECCION ::= If Parentesis_abierto CONDICION Parentesis_cerrado Then PROGRAM Endif 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("If", i, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                tokenList.add(new TokenObject("Then", t, Optional.empty()));
                tokenList.add(new TokenObject("Endif", ei, Optional.empty()));
                addNewRule(48, "SELECCION -> ",
                    addTerminalRuleItem(i),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("CONDICION"),
                    addTerminalRuleItem(pc),
                    addTerminalRuleItem(t),
                    addNonTerminalRuleItem("PROGRAM"),
                    addTerminalRuleItem(ei)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SELECCION ::= If Parentesis_abierto CONDICION Parentesis_cerrado Then PROGRAM Else PROGRAM Endif 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("If", i, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                tokenList.add(new TokenObject("Then", t, Optional.empty()));
                tokenList.add(new TokenObject("Else", e, Optional.empty()));
                tokenList.add(new TokenObject("Endif", ei, Optional.empty()));
                addNewRule(47, "SELECCION -> ",
                    addTerminalRuleItem(i),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("CONDICION"),
                    addTerminalRuleItem(pc),
                    addTerminalRuleItem(t),
                    addNonTerminalRuleItem("PROGRAM"),
                    addTerminalRuleItem(e),
                    addNonTerminalRuleItem("PROGRAM"),
                    addTerminalRuleItem(ei)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONAL ::= Or 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Or", o, Optional.empty()));
                addNewRule(46, "CONDICIONAL -> ",
                    addTerminalRuleItem(o)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICIONAL ::= And 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("And", a, Optional.empty()));
                addNewRule(45, "CONDICIONAL -> ",
                    addTerminalRuleItem(a)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMPARADOR ::= Diferente 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Diferente", m, Optional.empty()));
                addNewRule(44, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMPARADOR ::= Igual 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Igual", m, Optional.empty()));
                addNewRule(43, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMPARADOR ::= Menor_o_igual_que 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Menor_o_igual_que", m, Optional.empty()));
                addNewRule(42, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMPARADOR ::= Mayor_o_igual_que 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Mayor_o_igual_que", m, Optional.empty()));
                addNewRule(41, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMPARADOR ::= Mayor_que 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Mayor_que", m, Optional.empty()));
                addNewRule(40, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COMPARADOR ::= Menor_que 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Menor_que", m, Optional.empty()));
                addNewRule(39, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COMPARACION ::= EXPRESION COMPARADOR EXPRESION 
            {
              Object RESULT =null;
		
                addNewRule(38, "COMPARACION -> ",
                    addNonTerminalRuleItem("EXPRESION"),
                    addNonTerminalRuleItem("COMPARADOR"),
                    addNonTerminalRuleItem("EXPRESION")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICION ::= COMPARACION 
            {
              Object RESULT =null;
		
                addNewRule(37, "COMPARACION -> ",
                    addNonTerminalRuleItem("COMPARACION")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION ::= COMPARACION CONDICIONAL COMPARACION 
            {
              Object RESULT =null;
		
                addNewRule(36, "CONDICION -> ",
                    addNonTerminalRuleItem("COMPARACION"),
                    addNonTerminalRuleItem("CONDICIONAL"),
                    addNonTerminalRuleItem("COMPARACION")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= Not Parentesis_abierto COMPARACION Parentesis_cerrado 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Not", n, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(35, "CONDICION -> ",
                    addTerminalRuleItem(n),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("COMPARACION"),
                    addTerminalRuleItem(pc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= Parentesis_abierto COMPARACION Parentesis_cerrado CONDICIONAL Parentesis_abierto COMPARACION Parentesis_cerrado 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa2, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc2, Optional.empty()));
                addNewRule(34, "CONDICION -> ",
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("COMPARACION"),
                    addTerminalRuleItem(pc),
                    addNonTerminalRuleItem("CONDICIONAL"),
                    addTerminalRuleItem(pa2),
                    addNonTerminalRuleItem("COMPARACION"),
                    addTerminalRuleItem(pc2)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= Parentesis_abierto COMPARACION Parentesis_cerrado 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(33, "CONDICION -> ",
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("COMPARACION"),
                    addTerminalRuleItem(pc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ITERACION ::= While Parentesis_abierto CONDICION Parentesis_cerrado Llave_abierta PROGRAM Llave_cerrada 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String la = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("While", w, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                tokenList.add(new TokenObject("Llave_abierta", la, Optional.empty()));
                tokenList.add(new TokenObject("Llave_cerrada", lc, Optional.empty()));
                addNewRule(32, "ITERACION -> ",
                    addTerminalRuleItem(w),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("CONDICION"),
                    addTerminalRuleItem(pc),
                    addTerminalRuleItem(la),
                    addNonTerminalRuleItem("PROGRAM"),
                    addTerminalRuleItem(lc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FACTOR ::= Cte_b 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_b", b, Optional.empty()));
                addNewRule(31, "FACTOR -> ",
                    addTerminalRuleItem(b)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FACTOR ::= Cte_i 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_i", e, Optional.empty()));
                addNewRule(30, "FACTOR -> ",
                    addTerminalRuleItem(e)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FACTOR ::= Cte_f 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_f", f, Optional.empty()));
                addNewRule(29, "FACTOR -> ",
                    addTerminalRuleItem(f)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FACTOR ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(28, "FACTOR -> ",
                    addTerminalRuleItem(id)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FACTOR ::= Parentesis_abierto EXPRESION Parentesis_cerrado 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(27, "FACTOR -> ",
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("EXPRESION"),
                    addTerminalRuleItem(pc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;
		
              addNewRule(26, "TERMINO -> ",
                  addNonTerminalRuleItem("FACTOR")
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TERMINO ::= TERMINO Division FACTOR 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("Division", d, Optional.empty()));
                addNewRule(25, "TERMINO -> ",
                    addNonTerminalRuleItem("TERMINO"),
                    addTerminalRuleItem(d),
                    addNonTerminalRuleItem("FACTOR")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TERMINO ::= TERMINO Multiplicacion FACTOR 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("Multiplicacion", m, Optional.empty()));
                addNewRule(24, "TERMINO -> ",
                    addNonTerminalRuleItem("TERMINO"),
                    addTerminalRuleItem(m),
                    addNonTerminalRuleItem("FACTOR")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;
		
              addNewRule(23, "EXPRESION -> ",
                  addNonTerminalRuleItem("TERMINO")
              );
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("Resta", r, Optional.empty()));
                addNewRule(22, "EXPRESION -> ",
                    addNonTerminalRuleItem("EXPRESION"),
                    addTerminalRuleItem(r),
                    addNonTerminalRuleItem("TERMINO")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("Suma", s, Optional.empty()));
                addNewRule(21, "EXPRESION -> ",
                    addNonTerminalRuleItem("EXPRESION"),
                    addTerminalRuleItem(s),
                    addNonTerminalRuleItem("TERMINO")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= Id Asignacion EXPRESION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("ASIGNACION", a, Optional.empty()));
                addNewRule(20, "ASIGNACION -> ",
                    addTerminalRuleItem(id),
                    addTerminalRuleItem(a),
                    addNonTerminalRuleItem("EXPRESION")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SALIDA 
            {
              Object RESULT =null;
		
                addNewRule(19, "SALIDA -> ",
                    addNonTerminalRuleItem("SALIDA")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= ASIGNACION_COMPLEJA 
            {
              Object RESULT =null;
		
                  addNewRule(18, "ASIGNACION_COMPLEJA -> ",
                      addNonTerminalRuleItem("ASIGNACION_COMPLEJA")
                  );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SELECCION 
            {
              Object RESULT =null;
		
                addNewRule(17, "SELECCION -> ",
                    addNonTerminalRuleItem("SELECCION")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ITERACION 
            {
              Object RESULT =null;
		
                addNewRule(16, "ITERACION -> ",
                    addNonTerminalRuleItem("ITERACION")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;
		
                addNewRule(15, "ASIGNACION -> ",
                    addNonTerminalRuleItem("ASIGNACION")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROGRAM ::= SENTENCIA Punto_y_coma 
            {
              Object RESULT =null;
		
                addNewRule(14, "PROGRAM -> ",
                    addNonTerminalRuleItem("SENTENCIA"),
                    addTerminalRuleItem("Punto_y_coma")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAM ::= SENTENCIA Punto_y_coma PROGRAM 
            {
              Object RESULT =null;
		int pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                addNewRule(13, "PROGRAM -> ",
                    addNonTerminalRuleItem("SENTENCIA"),
                    addTerminalRuleItem(pyc),
                    addNonTerminalRuleItem("PROGRAM")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAM_SECTION ::= Program_section PROGRAM Endprogram_section 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int epsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    tokenList.add(new TokenObject("PROGRAM_SECTION", ps, Optional.empty()));
                    tokenList.add(new TokenObject("ENDPROGRAM_SECTION", eps, Optional.empty()));
                    addNewRule(12, "PROGRAM_SECTION -> ",
                        addTerminalRuleItem(ps),
                        addNonTerminalRuleItem("PROGRAM"),
                        addTerminalRuleItem(eps)
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM_SECTION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= String 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          addType("STRING");
          tokenList.add(new TokenObject("STRING", s, Optional.empty()));
          addNewRule(11, "TIPO -> ",
                addTerminalRuleItem(s)
            );
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= Int 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          addType("INT");
          tokenList.add(new TokenObject("INT", i, Optional.empty()));
          addNewRule(10, "TIPO -> ",
                addTerminalRuleItem(i)
            );
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= Float 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            addType("FLOAT");
            tokenList.add(new TokenObject("FLOAT", f, Optional.empty()));
            addNewRule(9, "TIPO -> ",
                addTerminalRuleItem(f)
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ITEMS ::= Id Corchete_cerrado Asign_mult Corchete_abierto TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("ID", id, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_cerrado", cc, Optional.empty()));
                tokenList.add(new TokenObject("Asign_mult", am, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_abierto", ca, Optional.empty()));
                addNewRule(8, "ITEMS -> ",
                    addTerminalRuleItem(id),
                    addTerminalRuleItem(cc),
                    addTerminalRuleItem(am),
                    addTerminalRuleItem(ca),
                    addNonTerminalRuleItem("TIPO")
                );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEMS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ITEMS ::= Id Coma ITEMS Coma TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tokenList.add(new TokenObject("ID", id, Optional.empty()));
                tokenList.add(new TokenObject("Coma", c, Optional.empty()));
                tokenList.add(new TokenObject("Coma", cc, Optional.empty()));               
                addNewRule(7, "ITEMS -> ",
                    addTerminalRuleItem(id),
                    addTerminalRuleItem(c),
                    addNonTerminalRuleItem("ITEMS"),
                    addTerminalRuleItem(cc),
                    addNonTerminalRuleItem("TIPO")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEMS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= Corchete_abierto ITEMS Corchete_cerrado 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Corchete_abierto", ca, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_cerrado", cc, Optional.empty())); 
                sortTypes();             
                addNewRule(6, "DECLARACION -> ",
                    addTerminalRuleItem(ca),
                    addNonTerminalRuleItem("ITEMS"),
                    addTerminalRuleItem(cc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;
		             
                    addNewRule(5, "DECLARACIONES -> ",
                        addNonTerminalRuleItem("DECLARACION")
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACION DECLARACIONES 
            {
              Object RESULT =null;
							
                    addNewRule(4, "DECLARACIONES -> ",
                        addNonTerminalRuleItem("DECLARACION"),
                        addNonTerminalRuleItem("DECLARACIONES")
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_SECTION ::= Declare_section DECLARACIONES Enddeclare_section 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ds = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int edsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eds = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    tokenList.add(new TokenObject("DECLARE_SECTION", ds, Optional.empty()));
                    tokenList.add(new TokenObject("ENDDECLARE_SECTION", eds, Optional.empty()));
                    addNewRule(3, "DECLARESECTION -> ",
                        addTerminalRuleItem(ds),
                        addNonTerminalRuleItem("DECLARACIONES"),
                        addTerminalRuleItem(eds)
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE_SECTION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= PROGRAM_SECTION_WRITE 
            {
              Object RESULT =null;
		
                addNewRule(2, "START -> ",
                    addNonTerminalRuleItem("PROGRAM_SECTION_WRITE")
                );
                RESULT = new TokenRulesObject(tokenList, rulesList);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= DECLARE_SECTION PROGRAM_SECTION 
            {
              Object RESULT =null;
		
                addNewRule(1, "START -> ",
                    addNonTerminalRuleItem("DECLARE_SECTION"),
                    addNonTerminalRuleItem("PROGRAM_SECTION")
                );
                RESULT = new TokenRulesObject(tokenList, rulesList);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

